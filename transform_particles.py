#!/nfs/home/bbasanta/anaconda2/envs/py37/bin/python

import numpy as np
import pandas as pd
from copy import copy
from scipy.spatial.transform import Rotation as R
import json
import argparse
import sys

def interpret(s):
    try: return json.loads(s)
    except ValueError: return s

def read_star(fname):
    version_n = 0
    opticgr_cols = []
    opticgr_entries = []
    part_cols = []
    part_entries = []
    rln_31 = False
    with open(fname, 'r') as file:
        lines = [i[:-1] for i in file.readlines()]
        loop_ = False
        for line in lines:
            split_line = line.split()
            if version_n == 0 and line.startswith('data_'): print('RELION version < 3.1 star file detected.'); version_n = 2;
            if line.startswith('# version'):
                print('RELION version >= 3.1 star file detected.')
                rln_31 = True
                version_n+=1
                loop_ = False
            if line.startswith('loop_'): loop_ = True; continue
            if version_n == 1 and len(split_line)>0:
                if line.startswith('_rln'): opticgr_cols.append(split_line[0])
                elif loop_: opticgr_entries.append(split_line)
            if version_n == 2 and len(split_line)>0:
                if line.startswith('_rln'): part_cols.append(split_line[0])
                elif loop_: part_entries.append(split_line)
    opt_dict = { i[0]:{ j:interpret( k ) for j,k in zip(opticgr_cols,i) } for i in opticgr_entries}
    opt_gr_df = pd.DataFrame.from_dict(opt_dict,orient='index',columns=opticgr_cols)
    part_dict = { n:{ j:interpret( k ) for j,k in zip(part_cols,i) } for n,i in enumerate(part_entries)}
    part_df = pd.DataFrame.from_dict(part_dict,orient='index',columns=part_cols)
    print('Read %d particle entries from RELION star file.'%(len(part_df.index)))
    return opt_gr_df,part_df,rln_31

def write_star(fname,opt_df,par_df,is_rln_31):
    fout = open(fname,'w')
    if is_rln_31:
        fout.write('\n# version 30001\n\ndata_optics\n\nloop_\n')
        #fout.write('_rlnOpticsGroup #1\n')
        for n,col in enumerate(opt_df.columns):
            #fout.write('_rlnOpticsGroupName #1\n')
            fout.write('%s #%d\n'%(col,n+1))
        fout.write(opt_df.to_string(header=False,index=False,index_names=False)+'\n')
        fout.write('\n\n# version 30001\n\ndata_particles\n\nloop_\n')
    else: fout.write('\ndata_\n\nloop_\n')
    for n,col in enumerate(par_df.columns):
        fout.write('%s #%d\n'%(col,n+1))
    if not is_rln_31: fout.write('\n')
    fout.write(par_df.to_string(header=False,index=False,index_names=False)+'\n')
    fout.close()

def reangle(mtx,new_rot):
    out = []
    for i in range(np.shape(mtx)[0]):
        part_mtx = R.from_euler('ZYZ',mtx[i],degrees=True).as_matrix()
        new_mtx = np.matmul(new_rot,part_mtx)
        new_R = R.from_matrix(new_mtx)
        nuang = new_R.as_euler('ZYZ',degrees=True)
        out.append(nuang)
    return np.array(out)

def retro_angle(mtx,trans_v,new_rot):
    out = []
    for i in range(np.shape(mtx)[0]):
        part_mtx = R.from_euler('ZYZ',mtx[i][:3],degrees=True).as_matrix()
        #print(part_mtx)
        new_mtx = np.matmul(new_rot,part_mtx)
        new_R = R.from_matrix(new_mtx).inv()
        #print(new_R.as_matrix())
        new_vec = new_R.apply(trans_v)
        nu_coords = np.array([mtx[i][3]+new_vec[0],mtx[i][4]+new_vec[1]])
        #print(nu_coords)
        out.append(nu_coords)
    return np.array(out)

if __name__ == "__main__":
    argparser = argparse.ArgumentParser(description='Use transformation matrices generated by chim_session_to_mtx.py \
                                                     to populate a template relion star file Euler angles and rotation origins.')
    argparser.add_argument('--starfile',required=True, type=str,help='RELION *.star file to use as template.')
    argparser.add_argument('--angpix',required=False, type=float ,help='Particle pixel size.')
    argparser.add_argument('--transformation_mtx',required=True, type=str, help='Desired 3x4 transformation matrix in Angstroms. E.g.: "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]"')
    argparser.add_argument('--output_name',type=str,help='Name for output *.star file')
    args = argparser.parse_args()

    opt_df, par_df, is_rln_31 = read_star(args.starfile)
    in_angs = False

    if not is_rln_31:
        in_angs = True
        if not args.angpix:
            sys.exit('Origin is required to be in pixels, but particle pixel size was not provided. Exiting without producing new star file.')

    # Example matrix input: [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
    mtx_from_chimera = np.array(json.loads(args.transformation_mtx))
    print('Translations:')
    print(mtx_from_chimera[:,3])
    print('Rotation:')
    print(mtx_from_chimera[:,:3])
    new_angles = reangle(par_df[['_rlnAngleRot','_rlnAngleTilt','_rlnAnglePsi']].values,mtx_from_chimera[:,:3])
    new_part_df = par_df.copy()
    new_part_df = new_part_df.assign(_rlnAngleRot=new_angles[:,0])
    new_part_df = new_part_df.assign(_rlnAngleTilt=new_angles[:,1])
    new_part_df = new_part_df.assign(_rlnAnglePsi=new_angles[:,2])

    new_xy = np.array([])
    if is_rln_31:
        new_xy = retro_angle(par_df[['_rlnAngleRot','_rlnAngleTilt','_rlnAnglePsi',
                                '_rlnOriginXAngst','_rlnOriginYAngst']].values,mtx_from_chimera[:,3],mtx_from_chimera[:,:3])
        new_part_df = new_part_df.assign(_rlnOriginXAngst=new_xy[:,0])
        new_part_df = new_part_df.assign(_rlnOriginYAngst=new_xy[:,1])

    else:
        new_xy = retro_angle(par_df[['_rlnAngleRot','_rlnAngleTilt','_rlnAnglePsi',
                                '_rlnOriginX','_rlnOriginY']].values,mtx_from_chimera[:,3]/angpix,mtx_from_chimera[:,:3])
        new_part_df = new_part_df.assign(_rlnOriginX=new_xy[:,0])
        new_part_df = new_part_df.assign(_rlnOriginY=new_xy[:,1])

    outname = '.'.join(args.starfile.split('/')[-1].split('.')[:-1])+'.transformed.star'
    if args.output_name: outname = args.output_name
    write_star(outname,opt_df,new_part_df,is_rln_31)
